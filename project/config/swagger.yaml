openapi: 3.0.0
info:
    title: 'Symfony CRUD API'
    description: "Documentation de l'API pour gérer les utilisateurs, clients, matériaux, ventes et tickets"
    version: 1.0.0
servers:
    -
        url: 'http://localhost:8741/api'
        description: 'Serveur local'
paths:
    /login:
        post:
            summary: 'Authentifie un utilisateur et retourne un token'
            tags:
                - Authentication
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    example: test@test.com
                                password:
                                    type: string
                                    example: test
                            required:
                                - email
                                - password
            responses:
                '200':
                    description: 'Authentification réussie'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    token: { type: string, example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... }
                '401':
                    description: 'Identifiants invalides'
    /user:
        get:
            summary: "Récupère l'utilisateur authentifié"
            tags:
                - Authentication
            security:
                -
                    bearerAuth: []
            responses:
                '200':
                    description: 'Utilisateur authentifié'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '401':
                    description: 'Non authentifié'
    /utilisateur/ping:
        get:
            summary: "Ping pour tester l'accès utilisateur"
            tags:
                - Utilisateur
            responses:
                '200':
                    description: 'Réponse de ping réussie'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: { type: string, example: Pong }
    /material/ping:
        get:
            summary: "Ping pour tester l'accès matériel"
            tags:
                - Material
            responses:
                '200':
                    description: 'Réponse de ping réussie'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: { type: string, example: Pong }
    /client:
        get:
            summary: 'Liste tous les clients'
            tags:
                - Client
            security:
                -
                    bearerAuth: []
            responses:
                '200':
                    description: 'Liste des clients'
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Customer'
                '401':
                    description: 'Non authentifié'
        post:
            summary: 'Crée un nouveau client'
            tags:
                - Client
            security:
                -
                    bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                surnom:
                                    type: string
                                    example: Client1
                                user_id:
                                    type: integer
                                    example: 1
                            required:
                                - surnom
                                - user_id
            responses:
                '201':
                    description: 'Client créé'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Customer'
                '401':
                    description: 'Non authentifié'
                '422':
                    description: 'Validation échouée'
    '/client/{id}':
        get:
            summary: 'Récupère un client spécifique'
            tags:
                - Client
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    name: id
                    in: path
                    required: true
                    schema:
                        type: integer
            responses:
                '200':
                    description: 'Détails du client'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Customer'
                '401':
                    description: 'Non authentifié'
                '404':
                    description: 'Client non trouvé'
        put:
            summary: 'Met à jour un client'
            tags:
                - Client
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    name: id
                    in: path
                    required: true
                    schema:
                        type: integer
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                surnom:
                                    type: string
                                    example: ClientUpdated
                                user_id:
                                    type: integer
                                    example: 1
            responses:
                '200':
                    description: 'Client mis à jour'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Customer'
                '401':
                    description: 'Non authentifié'
                '404':
                    description: 'Client non trouvé'
                '422':
                    description: 'Validation échouée'
        delete:
            summary: 'Supprime un client'
            tags:
                - Client
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    name: id
                    in: path
                    required: true
                    schema:
                        type: integer
            responses:
                '204':
                    description: 'Client supprimé'
                '401':
                    description: 'Non authentifié'
                '404':
                    description: 'Client non trouvé'
    /material:
        get:
            summary: 'Liste tous les matériaux'
            tags:
                - Material
            security:
                -
                    bearerAuth: []
            responses:
                '200':
                    description: 'Liste des matériaux'
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Material'
                '401':
                    description: 'Non authentifié'
        post:
            summary: 'Crée un nouveau matériau'
            tags:
                - Material
            security:
                -
                    bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                designation:
                                    type: string
                                    example: Material1
                            required:
                                - designation
            responses:
                '201':
                    description: 'Matériau créé'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Material'
                '401':
                    description: 'Non authentifié'
                '422':
                    description: 'Validation échouée'
    '/material/{id}':
        get:
            summary: 'Récupère un matériau spécifique'
            tags:
                - Material
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    name: id
                    in: path
                    required: true
                    schema:
                        type: integer
            responses:
                '200':
                    description: 'Détails du matériau'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Material'
                '401':
                    description: 'Non authentifié'
                '404':
                    description: 'Matériau non trouvé'
        put:
            summary: 'Met à jour un matériau'
            tags:
                - Material
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    name: id
                    in: path
                    required: true
                    schema:
                        type: integer
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                designation:
                                    type: string
                                    example: MaterialUpdated
            responses:
                '200':
                    description: 'Matériau mis à jour'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Material'
                '401':
                    description: 'Non authentifié'
                '404':
                    description: 'Matériau non trouvé'
                '422':
                    description: 'Validation échouée'
        delete:
            summary: 'Supprime un matériau'
            tags:
                - Material
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    name: id
                    in: path
                    required: true
                    schema:
                        type: integer
            responses:
                '204':
                    description: 'Matériau supprimé'
                '401':
                    description: 'Non authentifié'
                '404':
                    description: 'Matériau non trouvé'
    /sale:
        get:
            summary: 'Liste toutes les ventes'
            tags:
                - Sale
            security:
                -
                    bearerAuth: []
            responses:
                '200':
                    description: 'Liste des ventes'
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Sale'
                '401':
                    description: 'Non authentifié'
        post:
            summary: 'Crée une nouvelle vente'
            tags:
                - Sale
            security:
                -
                    bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                titre:
                                    type: string
                                    example: Sale1
                                description:
                                    type: string
                                    example: 'Description of Sale1'
                                customer_id:
                                    type: integer
                                    example: 1
                            required:
                                - titre
                                - customer_id
            responses:
                '201':
                    description: 'Vente créée'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Sale'
                '401':
                    description: 'Non authentifié'
                '422':
                    description: 'Validation échouée'
    '/sale/{id}':
        get:
            summary: 'Récupère une vente spécifique'
            tags:
                - Sale
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    name: id
                    in: path
                    required: true
                    schema:
                        type: integer
            responses:
                '200':
                    description: 'Détails de la vente'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Sale'
                '401':
                    description: 'Non authentifié'
                '404':
                    description: 'Vente non trouvée'
        put:
            summary: 'Met à jour une vente'
            tags:
                - Sale
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    name: id
                    in: path
                    required: true
                    schema:
                        type: integer
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                titre:
                                    type: string
                                    example: SaleUpdated
                                description:
                                    type: string
                                    example: 'Updated Description'
                                customer_id:
                                    type: integer
                                    example: 1
            responses:
                '200':
                    description: 'Vente mise à jour'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Sale'
                '401':
                    description: 'Non authentifié'
                '404':
                    description: 'Vente non trouvée'
                '422':
                    description: 'Validation échouée'
        delete:
            summary: 'Supprime une vente'
            tags:
                - Sale
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    name: id
                    in: path
                    required: true
                    schema:
                        type: integer
            responses:
                '204':
                    description: 'Vente supprimée'
                '401':
                    description: 'Non authentifié'
                '404':
                    description: 'Vente non trouvée'
    /ticket:
        get:
            summary: 'Liste tous les tickets'
            tags:
                - Ticket
            security:
                -
                    bearerAuth: []
            responses:
                '200':
                    description: 'Liste des tickets'
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Ticket'
                '401':
                    description: 'Non authentifié'
        post:
            summary: 'Crée un nouveau ticket'
            tags:
                - Ticket
            security:
                -
                    bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                titre:
                                    type: string
                                    example: Ticket1
                                description:
                                    type: string
                                    example: 'Description of Ticket1'
                            required:
                                - titre
            responses:
                '201':
                    description: 'Ticket créé'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Ticket'
                '401':
                    description: 'Non authentifié'
                '422':
                    description: 'Validation échouée'
    '/ticket/{id}':
        get:
            summary: 'Récupère un ticket spécifique'
            tags:
                - Ticket
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    name: id
                    in: path
                    required: true
                    schema:
                        type: integer
            responses:
                '200':
                    description: 'Détails du ticket'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Ticket'
                '401':
                    description: 'Non authentifié'
                '404':
                    description: 'Ticket non trouvé'
        put:
            summary: 'Met à jour un ticket'
            tags:
                - Ticket
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    name: id
                    in: path
                    required: true
                    schema:
                        type: integer
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                titre:
                                    type: string
                                    example: TicketUpdated
                                description:
                                    type: string
                                    example: 'Updated Description'
            responses:
                '200':
                    description: 'Ticket mis à jour'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Ticket'
                '401':
                    description: 'Non authentifié'
                '404':
                    description: 'Ticket non trouvé'
                '422':
                    description: 'Validation échouée'
        delete:
            summary: 'Supprime un ticket'
            tags:
                - Ticket
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    name: id
                    in: path
                    required: true
                    schema:
                        type: integer
            responses:
                '204':
                    description: 'Ticket supprimé'
                '401':
                    description: 'Non authentifié'
                '404':
                    description: 'Ticket non trouvé'
    /utilisateur:
        get:
            summary: 'Liste tous les utilisateurs'
            tags:
                - Utilisateur
            security:
                -
                    bearerAuth: []
            responses:
                '200':
                    description: 'Liste des utilisateurs'
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/User'
                '401':
                    description: 'Non authentifié'
        post:
            summary: 'Crée un nouvel utilisateur'
            tags:
                - Utilisateur
            security:
                -
                    bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    example: 'John Doe'
                                email:
                                    type: string
                                    example: john@example.com
                                password:
                                    type: string
                                    example: password123
                            required:
                                - name
                                - email
                                - password
            responses:
                '201':
                    description: 'Utilisateur créé'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '401':
                    description: 'Non authentifié'
                '422':
                    description: 'Validation échouée'
    '/utilisateur/{id}':
        get:
            summary: 'Récupère un utilisateur spécifique'
            tags:
                - Utilisateur
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    name: id
                    in: path
                    required: true
                    schema:
                        type: integer
            responses:
                '200':
                    description: "Détails de l'utilisateur"
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '401':
                    description: 'Non authentifié'
                '404':
                    description: 'Utilisateur non trouvé'
        put:
            summary: 'Met à jour un utilisateur'
            tags:
                - Utilisateur
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    name: id
                    in: path
                    required: true
                    schema:
                        type: integer
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    example: 'Updated Name'
                                email:
                                    type: string
                                    example: updated@example.com
                                password:
                                    type: string
                                    example: newpassword123
            responses:
                '200':
                    description: 'Utilisateur mis à jour'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '401':
                    description: 'Non authentifié'
                '404':
                    description: 'Utilisateur non trouvé'
                '422':
                    description: 'Validation échouée'
        delete:
            summary: 'Supprime un utilisateur'
            tags:
                - Utilisateur
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    name: id
                    in: path
                    required: true
                    schema:
                        type: integer
            responses:
                '204':
                    description: 'Utilisateur supprimé'
                '401':
                    description: 'Non authentifié'
                '404':
                    description: 'Utilisateur non trouvé'
components:
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
            description: 'Token JWT ou Sanctum requis pour les endpoints protégés'
    schemas:
        User:
            type: object
            properties:
                id:
                    type: integer
                    example: 1
                name:
                    type: string
                    example: 'John Doe'
                email:
                    type: string
                    example: john@example.com
                email_verified_at:
                    type: string
                    format: date-time
                    nullable: true
                created_at:
                    type: string
                    format: date-time
                updated_at:
                    type: string
                    format: date-time
            required:
                - id
                - name
                - email
        Customer:
            type: object
            properties:
                id:
                    type: integer
                    example: 1
                surnom:
                    type: string
                    example: Client1
                user_id:
                    type: integer
                    example: 1
                created_at:
                    type: string
                    format: date-time
                updated_at:
                    type: string
                    format: date-time
            required:
                - id
                - surnom
                - user_id
        Material:
            type: object
            properties:
                id:
                    type: integer
                    example: 1
                designation:
                    type: string
                    example: Material1
                created_at:
                    type: string
                    format: date-time
                updated_at:
                    type: string
                    format: date-time
            required:
                - id
                - designation
        Sale:
            type: object
            properties:
                id:
                    type: integer
                    example: 1
                titre:
                    type: string
                    example: Sale1
                description:
                    type: string
                    example: 'Description of Sale1'
                    nullable: true
                customer_id:
                    type: integer
                    example: 1
                created_at:
                    type: string
                    format: date-time
                updated_at:
                    type: string
                    format: date-time
            required:
                - id
                - titre
                - customer_id
        Ticket:
            type: object
            properties:
                id:
                    type: integer
                    example: 1
                titre:
                    type: string
                    example: Ticket1
                description:
                    type: string
                    example: 'Description of Ticket1'
                    nullable: true
                created_at:
                    type: string
                    format: date-time
                updated_at:
                    type: string
                    format: date-time
            required:
                - id
                - titre
security:
    -
        bearerAuth: []
